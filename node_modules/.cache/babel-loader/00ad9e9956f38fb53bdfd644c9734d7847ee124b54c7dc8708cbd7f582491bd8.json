{"ast":null,"code":"// // App.js\n// import React, { useState } from 'react';\n// import bcrypt from 'bcryptjs';\n// import './login.css'\n\n// const App = () => {\n//   const [username, setUsername] = useState('');\n//   const [password, setPassword] = useState('');\n\n//   const handleLogin = () => {\n//     // Aquí deberías hacer la lógica para verificar el usuario y contraseña\n//     // Por ejemplo, podrías compararlos con valores guardados en localStorage\n//     const storedUsername = localStorage.getItem('username');\n//     const storedPassword = localStorage.getItem('password');\n\n//     if (username === storedUsername && bcrypt.compareSync(password, storedPassword)) {\n//       alert('Inicio de sesión exitoso');\n//     } else {\n//       alert('Usuario o contraseña incorrectos');\n//     }\n//   };\n\n//   const handleSignup = () => {\n//     // Aquí deberías hacer la lógica para guardar el nuevo usuario y contraseña\n//     const hashedPassword = bcrypt.hashSync(password, 10); // 10 es el costo del hash, puedes ajustarlo según tus necesidades\n//     localStorage.setItem('username', username);\n//     localStorage.setItem('password', hashedPassword);\n//     alert('Usuario registrado exitosamente');\n//   };\n\n//   return (\n//     <div>\n//       <h1>Iniciar Sesión</h1>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Usuario\"\n//         value={username}\n//         onChange={(e) => setUsername(e.target.value)}\n//       />\n//       <input\n//         type=\"password\"\n//         placeholder=\"Contraseña\"\n//         value={password}\n//         onChange={(e) => setPassword(e.target.value)}\n//       />\n//       <button onClick={handleLogin}>Iniciar Sesión</button>\n//       <button onClick={handleSignup}>Registrarse</button>\n//     </div>\n//   );\n// };\n\n// export default App;","map":{"version":3,"names":[],"sources":["C:/Users/alfon/OneDrive/Documentos/GitHub/frontend/src/pages/login/login.jsx"],"sourcesContent":["// // App.js\n// import React, { useState } from 'react';\n// import bcrypt from 'bcryptjs';\n// import './login.css'\n\n\n// const App = () => {\n//   const [username, setUsername] = useState('');\n//   const [password, setPassword] = useState('');\n\n//   const handleLogin = () => {\n//     // Aquí deberías hacer la lógica para verificar el usuario y contraseña\n//     // Por ejemplo, podrías compararlos con valores guardados en localStorage\n//     const storedUsername = localStorage.getItem('username');\n//     const storedPassword = localStorage.getItem('password');\n\n//     if (username === storedUsername && bcrypt.compareSync(password, storedPassword)) {\n//       alert('Inicio de sesión exitoso');\n//     } else {\n//       alert('Usuario o contraseña incorrectos');\n//     }\n//   };\n\n//   const handleSignup = () => {\n//     // Aquí deberías hacer la lógica para guardar el nuevo usuario y contraseña\n//     const hashedPassword = bcrypt.hashSync(password, 10); // 10 es el costo del hash, puedes ajustarlo según tus necesidades\n//     localStorage.setItem('username', username);\n//     localStorage.setItem('password', hashedPassword);\n//     alert('Usuario registrado exitosamente');\n//   };\n\n//   return (\n//     <div>\n//       <h1>Iniciar Sesión</h1>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Usuario\"\n//         value={username}\n//         onChange={(e) => setUsername(e.target.value)}\n//       />\n//       <input\n//         type=\"password\"\n//         placeholder=\"Contraseña\"\n//         value={password}\n//         onChange={(e) => setPassword(e.target.value)}\n//       />\n//       <button onClick={handleLogin}>Iniciar Sesión</button>\n//       <button onClick={handleSignup}>Registrarse</button>\n//     </div>\n//   );\n// };\n\n// export default App;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}