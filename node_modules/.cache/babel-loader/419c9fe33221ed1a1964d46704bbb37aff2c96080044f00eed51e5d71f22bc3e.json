{"ast":null,"code":"const handleGoogleRegister = async googleData => {\n  const {\n    givenName,\n    familyName,\n    email\n  } = googleData.profileObj;\n  try {\n    const response = await fetch('http://127.0.0.1:8000/api/app1/Usuarios/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        nombres: givenName,\n        apellidos: familyName,\n        email: email\n      })\n    });\n    const data = await response.json();\n    if (response.ok) {\n      setSuccessMessage('Usuario registrado exitosamente');\n    } else {\n      if (data.email && data.email[0] === 'usuario con este email ya existe.') {\n        setErrorMessage('El usuario ya está registrado');\n      } else {\n        setErrorMessage('Error al registrar usuario');\n      }\n    }\n  } catch (error) {\n    setErrorMessage('Error al conectar con el servidor');\n  }\n};","map":{"version":3,"names":["handleGoogleRegister","googleData","givenName","familyName","email","profileObj","response","fetch","method","headers","body","JSON","stringify","nombres","apellidos","data","json","ok","setSuccessMessage","setErrorMessage","error"],"sources":["C:/Users/alfon/OneDrive/Documentos/GitHub/frontend/src/pages/register/register.jsx"],"sourcesContent":["const handleGoogleRegister = async (googleData) => {\r\n  const { givenName, familyName, email } = googleData.profileObj;\r\n\r\n  try {\r\n    const response = await fetch('http://127.0.0.1:8000/api/app1/Usuarios/', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        nombres: givenName,\r\n        apellidos: familyName,\r\n        email: email,\r\n      }),\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (response.ok) {\r\n      setSuccessMessage('Usuario registrado exitosamente');\r\n    } else {\r\n      if (data.email && data.email[0] === 'usuario con este email ya existe.') {\r\n        setErrorMessage('El usuario ya está registrado');\r\n      } else {\r\n        setErrorMessage('Error al registrar usuario');\r\n      }\r\n    }\r\n  } catch (error) {\r\n    setErrorMessage('Error al conectar con el servidor');\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAMA,oBAAoB,GAAG,MAAOC,UAAU,IAAK;EACjD,MAAM;IAAEC,SAAS;IAAEC,UAAU;IAAEC;EAAM,CAAC,GAAGH,UAAU,CAACI,UAAU;EAE9D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,0CAA0C,EAAE;MACvEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,OAAO,EAAEX,SAAS;QAClBY,SAAS,EAAEX,UAAU;QACrBC,KAAK,EAAEA;MACT,CAAC;IACH,CAAC,CAAC;IAEF,MAAMW,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAElC,IAAIV,QAAQ,CAACW,EAAE,EAAE;MACfC,iBAAiB,CAAC,iCAAiC,CAAC;IACtD,CAAC,MAAM;MACL,IAAIH,IAAI,CAACX,KAAK,IAAIW,IAAI,CAACX,KAAK,CAAC,CAAC,CAAC,KAAK,mCAAmC,EAAE;QACvEe,eAAe,CAAC,+BAA+B,CAAC;MAClD,CAAC,MAAM;QACLA,eAAe,CAAC,4BAA4B,CAAC;MAC/C;IACF;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdD,eAAe,CAAC,mCAAmC,CAAC;EACtD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}